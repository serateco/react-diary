{"version":3,"sources":["md/about/about.md","types/action.js","flucers/dispatchers.js","flucers/responser.js","fetch/controller.js","fetch/header.js","fetch/apis/index.js","reducers/common.js","reducers/index.js","components/nav.js","containers/nav.js","components/About.js","components/Profile.js","components/Contact.js","components/SiteMap.js","components/portfolio.js","route/componentMapper.js","components/Routers.js","containers/routers.js","components/App.js","actions/index.js","containers/app.js","serviceWorker.js","index.js"],"names":["module","exports","Actions","ROUTER_CHANGE","GNB_INIT","Dispatcher","responser","GNB","action","type","this","data","emit","EventEmitter","dispatcher","register","response","bind","Api","url","params","a","method","option","headers","toUpperCase","body","fetch","res","json","ApiList","About","Profile","Contact","SiteMap","Portfolio","common","state","getGnb","combineReducers","Nav","props","useState","item","setItem","gnb","then","menu","map","key","name","path","style","padding","to","className","connect","ownProps","fileName","content","trigger","on","ItemList","items","setItems","list","id","year","color","pantone_value","useEffect","console","log","componentMapper","Routers","routeList","component","child","routes","App","dispatch","Boolean","window","location","hostname","match","store","createStore","rootReducer","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.251fef69.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/about.5755be4b.md\";","//  action type 관리\r\nconst Actions  = {\r\n    ROUTER_CHANGE:'ROUTER_CHANGE',\r\n    GNB_INIT:'GNB_INIT',\r\n}\r\n\r\nexport default Actions;","import { Dispatcher } from 'flux';\r\nexport default new Dispatcher();","import { EventEmitter } from 'events';\r\nimport dispatcher from './dispatchers';\r\nimport Actions from '../types/action';\r\n\r\nclass Responser extends EventEmitter {\r\n\r\n    GNB = null;\r\n\r\n    response(action) {\r\n        switch(action.type){\r\n            case Actions.GNB_INIT:\r\n                this.GNB = action.data;\r\n                break;\r\n            case Actions.ROUTER_CHANGE:\r\n                //..\r\n                break;\r\n            default: //..\r\n        }\r\n        this.emit(action.type,action.data);\r\n    }\r\n\r\n    getGnb(){\r\n        return this.GNB;\r\n    }\r\n}\r\n\r\nconst responser = new Responser();\r\ndispatcher.register(responser.response.bind(responser));\r\nexport default responser;","import Header from './header';\r\nimport responser from '../flucers/responser';\r\n\r\nexport default async function Api(url,params) {\r\n    if(!params) params = {};\r\n    // 기본 GET.\r\n    if(!params.method) params.method = \"GET\";\r\n    // Fetch Option\r\n    let option = { headers: Header() };\r\n\r\n    switch( params.method.toUpperCase() ) {\r\n         //  POST일경우 BODY\r\n        case \"POST\":\r\n             option.body = params.data || {};\r\n             break;\r\n         // GET일경우 DATA\r\n        default:\r\n             option.data = params.data || {};\r\n    }\r\n    const res = await fetch( url, option );\r\n    const json = await res.json();\r\n\r\n    if(params.type) responser.response({\r\n        type:params.type,\r\n        data:json\r\n    });\r\n\r\n    return json;\r\n}","export default function Header(){\r\n    let config = {\r\n        'Content-Type': 'application/json',\r\n    };\r\n    return config;\r\n}\r\n\r\n\r\n","\r\nconst ApiList = {\r\n    GNB:'/static/gnb.json',\r\n    About: 'https://reqres.in/api/users?page=1',\r\n    Profile: 'https://reqres.in/api/users?page=2',\r\n    Contact: 'http://api.plos.org/search?q=title:DNA',\r\n    SiteMap: 'http://api.plos.org/search?q=title:%22Drosophila%22%20and%20body:%22RNA%22&fl=id,abstract',\r\n    Portfolio: 'https://reqres.in/api/unknown'\r\n}\r\n\r\nexport default ApiList;","import Actions from '../types/action';\r\nimport { Api, ApiList } from '../fetch';\r\nimport responser from '../flucers/responser';\r\n\r\nconst common = async (state = [], action) => {\r\n    switch (action.type) {\r\n        case Actions.ROUTER_CHANGE:\r\n            //....\r\n            return {...state };\r\n        case Actions.GNB_INIT:\r\n            const data = await (\r\n                responser.getGnb() || Api(ApiList.GNB, {\r\n                    type:Actions.GNB_INIT,\r\n                }\r\n                ));\r\n            return {...state,data};\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport default common;","import { combineReducers } from 'redux'\r\nimport common from './common'\r\n\r\n// store.dispatcher( action실행시 받는 Reducers )\r\nexport default combineReducers({\r\n    common,\r\n})","import React, { useState } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Nav = (props) =>{\r\n    const [ item, setItem ] = useState([]);\r\n    // Gnb. result\r\n    props.gnb.then((res)=>setItem(res.data));\r\n    const menu = item.map(({name,path},key)=>{\r\n        return <Link style={{padding:'10px'}} key={key} to={path}>{name}</Link>\r\n    })\r\n    return(\r\n        <div className=\"nav\">\r\n            {menu}\r\n        </div>\r\n    )\r\n};\r\nexport default Nav;","import { connect } from 'react-redux'\r\nimport Nav from '../components/nav';\r\n\r\nconst AppStateProps = (state, ownProps) => ({\r\n    gnb: state.common,\r\n    ...ownProps\r\n})\r\n\r\nexport default connect(AppStateProps)(Nav);","import React from 'react';\r\nimport Markdown from 'react-md-file';\r\n\r\nimport content from '../md/about/about.md';\r\n\r\nconst About = () =>(\r\n    <div>\r\n      <Markdown fileName={content}></Markdown>\r\n    </div>\r\n);\r\nexport default About;","import React from 'react';\r\n\r\nconst Profile = () =>(\r\n    <div>\r\n        Profile\r\n    </div>\r\n);\r\nexport default Profile;","import React from 'react';\r\n\r\nconst Contact = () =>(\r\n    <div>\r\n        Contact\r\n    </div>\r\n);\r\nexport default Contact;","import React from 'react';\r\n\r\nconst SiteMap = () =>(\r\n    <div>\r\n        SiteMap\r\n    </div>\r\n);\r\nexport default SiteMap;","import React, { useState, useEffect } from 'react';\r\nimport responser from '../flucers/responser';\r\nimport { Api, ApiList } from '../fetch';\r\n\r\nlet trigger = null;\r\nresponser.on('PORTFOLIO',(res)=>{trigger(res.data)});\r\n\r\nconst ItemList = () => {\r\n    const [ items, setItems ] = useState([]);\r\n    trigger = setItems;\r\n\r\n    const list = items.map(({id, name, year, color, pantone_value},key)=>{\r\n        return <li key={key}>\r\n            <p>id : { id } </p>\r\n            <p>name : { name } </p>\r\n            <p>year : { year } </p>\r\n            <p>color : { color } </p>\r\n            <p>pantone_value : { pantone_value } </p>\r\n        </li>\r\n    });\r\n\r\n    useEffect(()=>{\r\n        console.log('@update');\r\n        return (\r\n            console.log('@remove')\r\n        )\r\n    },[]);\r\n\r\n    return (\r\n        <ul>\r\n            {list}\r\n        </ul>\r\n    )\r\n}\r\n\r\nconst Portfolio = () => {\r\n    // type은 emit이벤트 발생 네임 => emit( type )\r\n    Api(ApiList.Portfolio, { type:'PORTFOLIO'} );\r\n    return (\r\n        <div>\r\n            <h1>diary</h1>\r\n            <ItemList/>\r\n        </div>\r\n    )\r\n};\r\nexport default Portfolio;","import About from '../components/About';\r\nimport Profile from '../components/Profile';\r\nimport Contact from '../components/Contact';\r\nimport SiteMap from '../components/SiteMap';\r\nimport Portfolio from '../components/portfolio';\r\n\r\nconst componentMapper = {\r\n    About: About,\r\n    Profile: Profile,\r\n    Contact: Contact,\r\n    SiteMap: SiteMap,\r\n    Portfolio:Portfolio\r\n};\r\n\r\nexport default componentMapper;","import React, { useState } from 'react';\r\nimport componentMapper from '../route/componentMapper';\r\nimport { Route, Switch } from \"react-router-dom\";\r\n\r\nconst Routers=(props)=>{\r\n    const [ item, setItem ] = useState([]);\r\n    props.gnb.then((res)=>{\r\n        setItem(res.data);\r\n    });\r\n    let routeList = item.map(({path,component,child},key)=>{\r\n        return componentMapper[component] ? <Route key={key} path={path} component={componentMapper[component]}/> : null;\r\n    });\r\n\r\n    const routes = routeList ? <Switch>{routeList}</Switch> : null;\r\n\r\n    return (\r\n       <div className=\"route-content\">\r\n            {routes}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Routers","import { connect } from 'react-redux'\r\nimport Routers from '../components/Routers';\r\n\r\nconst AppStateProps = (state, ownProps) => ({\r\n    gnb: state.common,\r\n    ...ownProps\r\n});\r\n\r\nexport default connect(\r\n    AppStateProps,\r\n)(Routers);","import React from 'react'\r\nimport Nav from '../containers/nav';\r\nimport Rotuers from '../containers/routers';\r\nimport { GnbInit, RouteChange } from '../actions';\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nconst App = (props) => {\r\n    // Gnb Load.\r\n    props.dispatch(GnbInit());\r\n    return (\r\n        <div>\r\n            <BrowserRouter>\r\n                <Nav/>\r\n                <Rotuers/>\r\n            </BrowserRouter>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;","import Actions from '../types/action';\r\n\r\nexport const GnbInit = params => ({\r\n    type: Actions.GNB_INIT,\r\n    params,\r\n})\r\n\r\nexport const RouteChange = params =>({\r\n    type: Actions.ROUTER_CHANGE,\r\n    params\r\n})\r\n","import { connect } from 'react-redux'\r\nimport App from '../components/App';\r\n\r\nexport default connect()(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport './index.css';\nimport './github.css';\nimport './json/gnb.json'\nimport { render } from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport rootReducer from './reducers'\nimport App from './containers/app'\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(rootReducer)\nwindow.store = store;\n\nrender(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n)\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PW\nserviceWorker.unregister();\n"],"sourceRoot":""}